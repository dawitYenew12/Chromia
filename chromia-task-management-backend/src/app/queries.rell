query get_all_tasks(
    user_id: byte_array,
    pointer: integer,
    n_tasks: integer
): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* {
        .user_id == user_id,
    } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_single_task_by_id(user_id: byte_array, task_id: byte_array): task {
    return task @ { .id == task_id, .user_id == user_id };
}

query get_tasks_by_due_date(
    status: text,
    pointer: integer,
    n_tasks: integer
): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .due_date == .due_date } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_tasks_by_status(
    status: text,
    pointer: integer,
    n_tasks: integer
): (pointer: integer, tasks: list<task_dto>) {
    val tasks = task @* { .status == status } (
        @sort_desc @omit task.rowid,
        task_dto (
            task.id,
            task.title,
            task.description,
            task.status,
            task.due_date,
        )
    ) offset pointer limit n_tasks;
    return (
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}
