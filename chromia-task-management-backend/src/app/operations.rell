operation create_task(title: text, description: text, due_date: integer) {
// rell-lint-disable-next-line
    var account = auth.authenticate();
    val user = user @ { account };
    val task_id = op_context.transaction.tx_rid;
    is_valid_date(due_date);
    create task (
        user_id = user.id,
        id = task_id,
        title = title,
        description = description,
        due_date = due_date,
        status = "pending",
    );
}

operation update_task(task_id: byte_array, title: text, description: text, status: text = "pending", due_date: integer ) {
// rell-lint-disable-next-line
    var account = auth.authenticate();
    val user = user @ { account };
    // var task = task @ { .id == task_id, .user_id == user.id };
    is_valid_date(due_date);
    update task @ {
            .id == task_id,
            .user_id == user.id
    } (
        id = task_id,
        title = title,
        description = description,
        due_date = due_date,
        status = status
    );
}

operation delete_task(task_id: byte_array) {
// rell-lint-disable-next-line
    var account = auth.authenticate();
    val user = user @ { account };
    var task = task @ { .id == task_id, .user_id == user.id };
    delete task;
}

operation complete_task(task_id: byte_array) {
// rell-lint-disable-next-line
    var account = auth.authenticate();
    val user = user @ { account };
    var task = task @ { .id == task_id, .user_id == user.id };

    if(task.status == "completed") {
        update task @ { .id == task_id, .user_id == user.id } ( .status = "pending" );
    } else {
     update task @ { .id == task_id, .user_id == user.id } ( .status = "completed" );
     }
}